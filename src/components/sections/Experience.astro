---
import ExperienceText from '@/components/islands/ExperienceText.tsx';
import ExperienceDataText from '@/components/islands/ExperienceDataText.tsx';
import ExperienceResume from '@/components/islands/ExperienceResume.tsx';
import { experiences } from '@/data/experience';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<section id="experience" class={`py-20 bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 ${className}`}>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="max-w-6xl mx-auto">

      <!-- Experience Header -->
      <ExperienceText client:only="preact" />

      <!-- Timeline with Experience Data -->
      <div class="relative">
        <ExperienceDataText client:only="preact" experiences={experiences} />
      </div>

      <!-- Want to Know More Section -->
      <ExperienceResume client:only="preact" />

    </div>
  </div>
</section>

<style>
  /* Enhanced animations and styles */
  .experience-card {
    opacity: 0;
    transform: translateY(40px) scale(0.95);
    animation: experienceSlideIn 0.8s ease-out forwards;
  }

  @keyframes experienceSlideIn {
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  /* Smooth fade-in animation for the entire section */
  .experience-timeline {
    animation: fadeInSection 1s ease-out;
  }

  @keyframes fadeInSection {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Enhanced gradient backgrounds */
  .experience-section-bg {
    background: linear-gradient(135deg, #f8fafc 0%, #ffffff 25%, #f1f5f9 50%, #ffffff 75%, #f8fafc 100%);
  }

  .dark .experience-section-bg {
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 25%, #111827 50%, #1e293b 75%, #0f172a 100%);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .experience-card {
      transform: translateX(-20px) scale(0.95);
    }

    @keyframes experienceSlideIn {
      to {
        opacity: 1;
        transform: translateX(0) scale(1);
      }
    }
  }

  /* Timeline enhancements */
  .timeline-dot {
    position: relative;
  }

  .timeline-dot::before {
    content: '';
    position: absolute;
    inset: -8px;
    border: 2px solid transparent;
    border-radius: 50%;
    background: linear-gradient(45deg, transparent, rgba(59, 130, 246, 0.3), transparent) padding-box;
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    mask-composite: exclude;
    animation: rotateGlow 3s linear infinite;
  }

  @keyframes rotateGlow {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<script>
  // Enhanced scroll animations with intersection observer
  const observerOptions = {
    root: null,
    rootMargin: '-80px 0px',
    threshold: 0.2
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate');

        // Add staggered animation to child elements
        const cards = entry.target.querySelectorAll('.experience-card');
        cards.forEach((card, index) => {
          setTimeout(() => {
            card.style.animationDelay = `${index * 0.2}s`;
            card.classList.add('animate');
          }, index * 100);
        });

        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  // Observe the timeline container
  const timeline = document.querySelector('.experience-timeline');
  if (timeline) {
    observer.observe(timeline);
  }

  // Add smooth scroll behavior to anchor links
  document.addEventListener('DOMContentLoaded', () => {
    const experienceSection = document.getElementById('experience');
    if (experienceSection) {
      experienceSection.classList.add('experience-timeline');
    }
  });
</script>