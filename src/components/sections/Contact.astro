---
import Card from '@/components/ui/Card.astro';
import Button from '@/components/ui/Button.astro';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;

const contactInfo = [
  {
    label: 'Email',
    value: 'kevin@example.com',
    href: 'mailto:kevin@example.com',
    icon: 'email'
  },
  {
    label: 'Phone',
    value: '+1 (555) 123-4567',
    href: 'tel:+15551234567',
    icon: 'phone'
  },
  {
    label: 'Location',
    value: 'San Francisco, CA',
    href: 'https://maps.google.com/?q=San Francisco, CA',
    icon: 'location'
  },
  {
    label: 'LinkedIn',
    value: 'linkedin.com/in/kevin',
    href: 'https://linkedin.com/in/kevin',
    icon: 'linkedin'
  }
];
---

<section id="contact" class={`py-20 bg-white dark:bg-gray-900 ${className}`}>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="max-w-6xl mx-auto">

      <!-- Section Header -->
      <div class="text-center mb-16">
        <h2 class="heading-lg mb-6">Get In Touch</h2>
        <p class="body-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
          I'm always open to discussing new opportunities, interesting projects, or just having a great conversation about technology.
        </p>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">

        <!-- Contact Form -->
        <Card variant="elevated" class="p-8">
          <h3 class="heading-md text-gray-900 dark:text-white mb-6">
            Send me a message
          </h3>

          <form id="contact-form" class="space-y-6">
            <!-- Name Field -->
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Full Name *
              </label>
              <input
                type="text"
                id="name"
                name="name"
                required
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white transition-colors duration-200"
                placeholder="Your full name"
              />
              <span class="error-message text-red-500 text-sm hidden"></span>
            </div>

            <!-- Email Field -->
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Email Address *
              </label>
              <input
                type="email"
                id="email"
                name="email"
                required
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white transition-colors duration-200"
                placeholder="your.email@example.com"
              />
              <span class="error-message text-red-500 text-sm hidden"></span>
            </div>

            <!-- Subject Field -->
            <div>
              <label for="subject" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Subject *
              </label>
              <select
                id="subject"
                name="subject"
                required
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white transition-colors duration-200"
              >
                <option value="">Select a subject</option>
                <option value="job-opportunity">Job Opportunity</option>
                <option value="project-collaboration">Project Collaboration</option>
                <option value="consulting">Consulting Services</option>
                <option value="general-inquiry">General Inquiry</option>
                <option value="other">Other</option>
              </select>
              <span class="error-message text-red-500 text-sm hidden"></span>
            </div>

            <!-- Message Field -->
            <div>
              <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Message *
              </label>
              <textarea
                id="message"
                name="message"
                rows="5"
                required
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white transition-colors duration-200 resize-vertical"
                placeholder="Tell me about your project, opportunity, or just say hello..."
              ></textarea>
              <span class="error-message text-red-500 text-sm hidden"></span>
            </div>

            <!-- Submit Button -->
            <div class="pt-4">
              <Button
                type="submit"
                variant="primary"
                size="lg"
                class="w-full group transition-all duration-300"
                id="submit-btn"
              >
                <span class="submit-text">Send Message</span>
                <span class="loading-text hidden">Sending...</span>
                <svg class="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </Button>
            </div>

            <!-- Success/Error Messages -->
            <div id="form-messages" class="hidden">
              <div id="success-message" class="hidden p-4 bg-green-100 border border-green-300 text-green-700 rounded-lg">
                <div class="flex items-center">
                  <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                  </svg>
                  Thank you! Your message has been sent successfully. I'll get back to you soon.
                </div>
              </div>
              <div id="error-message" class="hidden p-4 bg-red-100 border border-red-300 text-red-700 rounded-lg">
                <div class="flex items-center">
                  <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                  </svg>
                  Sorry, there was an error sending your message. Please try again or contact me directly.
                </div>
              </div>
            </div>
          </form>
        </Card>

        <!-- Contact Information -->
        <div class="space-y-8">
          <!-- Contact Details -->
          <Card variant="elevated" class="p-8">
            <h3 class="heading-md text-gray-900 dark:text-white mb-6">
              Contact Information
            </h3>

            <div class="space-y-6">
              {contactInfo.map((info) => (
                <div class="flex items-center group">
                  <div class="flex-shrink-0 w-12 h-12 bg-primary-100 dark:bg-primary-900 rounded-lg flex items-center justify-center group-hover:bg-primary-200 dark:group-hover:bg-primary-800 transition-colors duration-200">
                    {info.icon === 'email' && (
                      <svg class="w-6 h-6 text-primary-600 dark:text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                      </svg>
                    )}
                    {info.icon === 'phone' && (
                      <svg class="w-6 h-6 text-primary-600 dark:text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                      </svg>
                    )}
                    {info.icon === 'location' && (
                      <svg class="w-6 h-6 text-primary-600 dark:text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                    )}
                    {info.icon === 'linkedin' && (
                      <svg class="w-6 h-6 text-primary-600 dark:text-primary-400" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                      </svg>
                    )}
                  </div>
                  <div class="ml-4 flex-1">
                    <p class="text-sm font-medium text-gray-900 dark:text-white">
                      {info.label}
                    </p>
                    <a
                      href={info.href}
                      target={info.icon === 'linkedin' || info.icon === 'location' ? '_blank' : undefined}
                      rel={info.icon === 'linkedin' || info.icon === 'location' ? 'noopener noreferrer' : undefined}
                      class="text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 transition-colors duration-200"
                    >
                      {info.value}
                    </a>
                  </div>
                </div>
              ))}
            </div>
          </Card>

          <!-- Quick Connect -->
          <Card variant="outlined" class="p-8 text-center">
            <h3 class="heading-md text-gray-900 dark:text-white mb-4">
              Let's Connect!
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mb-6">
              Follow me on social media for updates on my latest projects and tech insights.
            </p>
            <div class="flex justify-center space-x-4">
              <a
                href="https://linkedin.com/in/kevin"
                target="_blank"
                rel="noopener noreferrer"
                class="w-12 h-12 bg-blue-600 hover:bg-blue-700 text-white rounded-lg flex items-center justify-center transition-colors duration-200 focus-ring"
                aria-label="LinkedIn Profile"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
              </a>
              <a
                href="https://github.com/kevin"
                target="_blank"
                rel="noopener noreferrer"
                class="w-12 h-12 bg-gray-800 hover:bg-gray-900 text-white rounded-lg flex items-center justify-center transition-colors duration-200 focus-ring"
                aria-label="GitHub Profile"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                </svg>
              </a>
              <a
                href="https://twitter.com/kevin"
                target="_blank"
                rel="noopener noreferrer"
                class="w-12 h-12 bg-blue-400 hover:bg-blue-500 text-white rounded-lg flex items-center justify-center transition-colors duration-200 focus-ring"
                aria-label="Twitter Profile"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                </svg>
              </a>
            </div>
          </Card>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Contact form handling
  const contactForm = document.getElementById('contact-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const formMessages = document.getElementById('form-messages') as HTMLElement;
  const successMessage = document.getElementById('success-message') as HTMLElement;
  const errorMessage = document.getElementById('error-message') as HTMLElement;

  if (contactForm) {
    contactForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Clear previous messages
      formMessages.classList.add('hidden');
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');
      clearErrors();

      // Validate form
      if (!validateForm()) {
        return;
      }

      // Show loading state
      setLoadingState(true);

      try {
        // Simulate form submission (replace with actual API call)
        await simulateFormSubmission();

        // Show success message
        formMessages.classList.remove('hidden');
        successMessage.classList.remove('hidden');
        contactForm.reset();
      } catch (error) {
        // Show error message
        formMessages.classList.remove('hidden');
        errorMessage.classList.remove('hidden');
      } finally {
        setLoadingState(false);
      }
    });
  }

  function validateForm(): boolean {
    let isValid = true;
    const formData = new FormData(contactForm);

    // Validate required fields
    const requiredFields = ['name', 'email', 'subject', 'message'];

    requiredFields.forEach(field => {
      const input = document.getElementById(field) as HTMLInputElement;
      const value = formData.get(field) as string;

      if (!value || value.trim() === '') {
        showFieldError(field, 'This field is required');
        isValid = false;
      }
    });

    // Validate email format
    const email = formData.get('email') as string;
    if (email && !isValidEmail(email)) {
      showFieldError('email', 'Please enter a valid email address');
      isValid = false;
    }

    return isValid;
  }

  function isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  function showFieldError(fieldName: string, message: string): void {
    const field = document.getElementById(fieldName) as HTMLInputElement;
    const errorSpan = field.parentNode?.querySelector('.error-message') as HTMLElement;

    if (field && errorSpan) {
      field.classList.add('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
      errorSpan.textContent = message;
      errorSpan.classList.remove('hidden');
    }
  }

  function clearErrors(): void {
    const inputs = contactForm.querySelectorAll('input, select, textarea');
    const errorMessages = contactForm.querySelectorAll('.error-message');

    inputs.forEach(input => {
      input.classList.remove('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
    });

    errorMessages.forEach(error => {
      error.classList.add('hidden');
    });
  }

  function setLoadingState(loading: boolean): void {
    const submitText = submitBtn.querySelector('.submit-text') as HTMLElement;
    const loadingText = submitBtn.querySelector('.loading-text') as HTMLElement;

    if (loading) {
      submitBtn.disabled = true;
      submitBtn.classList.add('opacity-75', 'cursor-not-allowed');
      submitText.classList.add('hidden');
      loadingText.classList.remove('hidden');
    } else {
      submitBtn.disabled = false;
      submitBtn.classList.remove('opacity-75', 'cursor-not-allowed');
      submitText.classList.remove('hidden');
      loadingText.classList.add('hidden');
    }
  }

  async function simulateFormSubmission(): Promise<void> {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Simulate random success/failure for demo purposes
    // In real implementation, this would be an actual API call
    if (Math.random() > 0.1) {
      return Promise.resolve();
    } else {
      throw new Error('Simulated error');
    }
  }
</script>